#!/usr/bin/python
from html import HTML
from LogUtils import getModuleLogger
import json
import requests

logging = getModuleLogger(__name__)

userAgent = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.89 Safari/537.36'
reportUrl = 'https://www.reverse.it/feed?json'

def produceVXReport():
    agentHeader = {'User-agent': userAgent}

    h = HTML()
    head = h.head()
    head.link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.5/css/bootstrap.min.css')
    body = h.body()
    t = body.table(klass="table table-bordered", style="width: 100%;")

    thead = t.thead()
    r = thead.tr()
    r.th('Time')
    r.th('File Name')
    r.th('Type')
    r.th('Score')
    r.th('VT Percent')
    r.th('VX Family')
    r.th('ET Count')
    r.th('ET Alerts')
    r.th('Domain Count')
    r.th('Host Count')
    r.th('Report')

    try:
        logging.info('Fetching: {0}'.format(reportUrl))
        request = requests.get(reportUrl, headers=agentHeader)

        if request.status_code == 200:
            report = json.loads(request.text)

            logging.info('Request OK. Parsing JSON...')

            items = report["data"]
    
            tbody = t.tbody()
            for item in items:
                r = tbody.tr

                if "analysis_start_time" in item:
                    r.td(item["analysis_start_time"])
                else:
                    r.td('?')

                if "submitname" in item:
                    r.td(item["submitname"], style="word-break:break-all;")
                else:
                    r.td('?')

                if "type" in item:
                    r.td(item["type"])
                else:
                    r.td('?')

                if "threatscore" in item:
                    r.td('{0}/100'.format(item["threatscore"]))
                else:
                    r.td('?')

                if "vt_detect" in item:
                    vtScore = str(item["vt_detect"])
                    r.td('{0}%'.format(vtScore))
                else:
                    r.td('?')

                if "vxfamily" in item:
                    r.td(item["vxfamily"])
                else:
                    r.td('?')

                if "et_alerts_total" in item:
                    r.td(str(item["et_alerts_total"]))
                    etAlerts = item["et_alerts"]
                    lH = HTML()
                    l = lH.ul()
                    for etAlert in etAlerts:
                        l.li(etAlert["action"]["description"])
                    r.td(l, escape=False)
                else:
                    r.td('0')
                    r.td('')

                if "domains" in item:
                    r.td(str(len(item["domains"])))
                else:
                    r.td('0')

                if "hosts" in item:
                    r.td(str(len(item["hosts"])))
                else:
                    r.td('0')

                fileHash = item["sha256"]
                link = '<a href="https://www.reverse.it/sample/{0}/?environmentId=100" rel="noopener noreferrer" target="_blank">www.reverse.it</a>'.format(fileHash)
                r.td(link, escape=False)

            return unicode(h).encode('utf8')
        else:
            logging.error("Request failed. Status code: {1}.".format(request.status_code))
            sys.exit(1)

    except Exception as e:
        logging.error("Problem connecting.")
        logging.exception(sys.exc_info())
        logging.exception(type(e))
        logging.exception(e.args)
        logging.exception(e)
        sys.exit(1)
